name: Build Android APK

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Create simplified mobile app
      run: |
        mkdir -p src/financetracker
        
        # Create a simple app without complex UI dependencies
        cat > src/financetracker/app.py << 'EOF'
        import toga
        from toga.style import Pack
        from toga.style.pack import COLUMN, ROW
        import asyncio

        class FinanceApp(toga.App):
            def startup(self):
                """Initialize the application."""
                self.server_ip = "192.168.1.100"
                self.user_id = None
                
                # Create main window
                self.main_window = toga.MainWindow(title=self.formal_name)
                
                # Create simple interface
                main_box = toga.Box(style=Pack(direction=COLUMN, padding=10))
                
                # Title
                title = toga.Label(
                    "💰 Finance Tracker",
                    style=Pack(padding=10, font_size=20, text_align="center")
                )
                main_box.add(title)
                
                # Server IP
                ip_label = toga.Label("Laptop IP:")
                self.ip_input = toga.TextInput(value=self.server_ip)
                main_box.add(ip_label)
                main_box.add(self.ip_input)
                
                # Test connection
                test_btn = toga.Button(
                    "Test Connection",
                    on_press=self.test_connection,
                    style=Pack(padding=5)
                )
                main_box.add(test_btn)
                
                # User name
                name_label = toga.Label("Your Name:")
                self.name_input = toga.TextInput()
                main_box.add(name_label)
                main_box.add(self.name_input)
                
                # Income
                income_label = toga.Label("Monthly Income (₹):")
                self.income_input = toga.TextInput()
                main_box.add(income_label)
                main_box.add(self.income_input)
                
                # Create user
                create_btn = toga.Button(
                    "Create User",
                    on_press=self.create_user,
                    style=Pack(padding=5)
                )
                main_box.add(create_btn)
                
                # Expense input
                expense_label = toga.Label("Add Expense:")
                self.expense_input = toga.TextInput(
                    placeholder="e.g., Coffee ₹250 yesterday"
                )
                main_box.add(expense_label)
                main_box.add(self.expense_input)
                
                # Add expense
                add_btn = toga.Button(
                    "Add Expense",
                    on_press=self.add_expense,
                    style=Pack(padding=5)
                )
                main_box.add(add_btn)
                
                # Status
                self.status_label = toga.Label("Ready to connect...")
                main_box.add(self.status_label)
                
                # Health Score
                self.score_label = toga.Label("Health Score: Not calculated")
                main_box.add(self.score_label)
                
                self.main_window.content = main_box
                self.main_window.show()

            async def test_connection(self, widget):
                """Test connection"""
                self.server_ip = self.ip_input.value
                self.status_label.text = "Testing connection..."
                
                try:
                    # Simple connection test without external dependencies
                    import urllib.request
                    import json
                    
                    url = f"http://{self.server_ip}:5000/api/test"
                    req = urllib.request.Request(url)
                    response = urllib.request.urlopen(req, timeout=5)
                    
                    if response.status == 200:
                        self.status_label.text = f"✅ Connected to {self.server_ip}"
                    else:
                        self.status_label.text = f"❌ Connection failed"
                        
                except Exception as e:
                    self.status_label.text = f"❌ Cannot connect: {str(e)}"

            async def create_user(self, widget):
                """Create user"""
                name = self.name_input.value
                income_text = self.income_input.value
                
                if not name or not income_text:
                    self.status_label.text = "❌ Enter name and income"
                    return
                
                try:
                    income = int(income_text)
                    
                    import urllib.request
                    import json
                    
                    url = f"http://{self.server_ip}:5000/api/user"
                    data = json.dumps({"name": name, "income": income}).encode()
                    
                    req = urllib.request.Request(url, data=data)
                    req.add_header('Content-Type', 'application/json')
                    
                    response = urllib.request.urlopen(req, timeout=10)
                    result = json.loads(response.read().decode())
                    
                    if result.get('success'):
                        self.user_id = result['user_id']
                        self.status_label.text = f"✅ User created! ID: {self.user_id}"
                        self.name_input.value = ""
                        self.income_input.value = ""
                    else:
                        self.status_label.text = f"❌ Failed: {result.get('error')}"
                        
                except ValueError:
                    self.status_label.text = "❌ Enter valid income"
                except Exception as e:
                    self.status_label.text = f"❌ Error: {str(e)}"

            async def add_expense(self, widget):
                """Add expense"""
                text = self.expense_input.value
                
                if not text:
                    self.status_label.text = "❌ Describe your expense"
                    return
                
                if not self.user_id:
                    self.status_label.text = "❌ Create user first"
                    return
                
                try:
                    import urllib.request
                    import json
                    
                    url = f"http://{self.server_ip}:5000/api/expense"
                    data = json.dumps({"user_id": self.user_id, "text": text}).encode()
                    
                    req = urllib.request.Request(url, data=data)
                    req.add_header('Content-Type', 'application/json')
                    
                    response = urllib.request.urlopen(req, timeout=10)
                    result = json.loads(response.read().decode())
                    
                    if result.get('success'):
                        self.expense_input.value = ""
                        parsed = result.get('parsed', {})
                        self.status_label.text = f"✅ Added: ₹{parsed.get('amount', 0)}"
                        
                        # Get health score
                        await self.get_health_score()
                    else:
                        self.status_label.text = f"❌ Failed: {result.get('error')}"
                        
                except Exception as e:
                    self.status_label.text = f"❌ Error: {str(e)}"

            async def get_health_score(self):
                """Get health score"""
                try:
                    import urllib.request
                    import json
                    
                    url = f"http://{self.server_ip}:5000/api/dashboard/{self.user_id}"
                    response = urllib.request.urlopen(url, timeout=10)
                    result = json.loads(response.read().decode())
                    
                    if result.get('success'):
                        health = result.get('health_score', {})
                        score = health.get('score', 0)
                        grade = health.get('grade', 'Unknown')
                        
                        self.score_label.text = f"Health Score: {score} ({grade})"
                        
                except Exception as e:
                    print(f"Health score error: {e}")

        def main():
            return FinanceApp()

        if __name__ == '__main__':
            app = main()
            app.main_loop()
        EOF
        
        echo '__version__ = "0.0.1"' > src/financetracker/__init__.py
        
        cat > src/financetracker/__main__.py << 'EOF'
        from financetracker.app import main

        if __name__ == '__main__':
            app = main()
            app.main_loop()
        EOF

    - name: Create pyproject.toml without complex dependencies
      run: |
        cat > pyproject.toml << 'EOF'
        [build-system]
        requires = ["briefcase"]
        
        [tool.briefcase]
        project_name = "Finance Tracker"
        bundle = "org.example"
        version = "0.0.1"
        url = "https://github.com/example/finance-tracker"
        license = "MIT"
        author = "Finance App Developer"
        author_email = "developer@example.com"

        [tool.briefcase.app.financetracker]
        formal_name = "Finance Tracker"
        description = "Personal Finance Tracking Application"
        sources = ["src/financetracker"]
        requires = []
        
        [tool.briefcase.app.financetracker.android]
        requires = []
        build_gradle_dependencies = [
            "androidx.appcompat:appcompat:1.6.1",
            "androidx.constraintlayout:constraintlayout:2.1.4",
        ]
        EOF

    - name: Install Briefcase
      run: |
        python -m pip install --upgrade pip
        pip install briefcase

    - name: Build Android APK
      run: |
        briefcase create android
        briefcase build android
        briefcase package android

    - name: Find and copy APK files
      run: |
        echo "🔍 Searching for APK files..."
        find . -name "*.apk" -type f -exec echo "Found: {}" \;
        
        mkdir -p dist
        find . -name "*.apk" -type f -exec cp {} dist/ \;
        
        echo "📱 Files copied to dist:"
        ls -la dist/
        
        # Rename for easy identification
        cd dist
        for file in *.apk; do
            if [ -f "$file" ]; then
                mv "$file" "FinanceTracker-${file}"
            fi
        done
        
        echo "📱 Final APK files:"
        ls -la

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: finance-tracker-app
        path: dist/*
        retention-days: 30

    - name: Build summary
      run: |
        echo "## 🎉 Finance Tracker APK Built Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📱 Download & Install:" >> $GITHUB_STEP_SUMMARY
        echo "1. Download APK from Artifacts below" >> $GITHUB_STEP_SUMMARY
        echo "2. Install on Android phone" >> $GITHUB_STEP_SUMMARY
        echo "3. Run backend on laptop: \`python finance_backend.py\`" >> $GITHUB_STEP_SUMMARY
        echo "4. Enter laptop IP in app" >> $GITHUB_STEP_SUMMARY
        echo "5. Start tracking expenses!" >> $GITHUB_STEP_SUMMARY
